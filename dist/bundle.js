!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=1)}([function(t,e){t.exports=React},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(0),o=n(2),i=n(3);o.render(r.createElement(i.App,null),document.getElementById("example"))},function(t,e){t.exports=ReactDOM},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var i=n(0),a=n(4),l=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.prototype.render=function(){return i.createElement("div",null,i.createElement(a.SimilarityDetector,null))},e}(i.Component);e.App=l},function(t,e,n){"use strict";var r,o=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),i=this&&this.__assign||function(){return(i=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0});var a=n(0),l=n(5);n(9);var u=function(t){function e(){var e=t.call(this,{})||this;return e.state={differences:0,leftContent:"",rightContent:"",similarityPercent:0},e.handleLeftUpdate=e.handleLeftUpdate.bind(e),e.handleRightUpdate=e.handleRightUpdate.bind(e),e.handleLevin=e.handleLevin.bind(e),e}return o(e,t),e.prototype.handleLeftUpdate=function(t){this.setState(i({},this.state,{leftContent:t.target.value}),this.handleLevin)},e.prototype.handleRightUpdate=function(t){this.setState(i({},this.state,{rightContent:t.target.value}),this.handleLevin)},e.prototype.handleLevin=function(){var t=l.get(this.state.leftContent,this.state.rightContent),e=100*(1-t/Math.max(this.state.leftContent.length,this.state.rightContent.length));e=Math.trunc(e),this.setState(i({},this.state,{differences:t,similarityPercent:e}))},e.prototype.render=function(){return a.createElement("div",null,a.createElement("textarea",{id:"LeftText",onChange:this.handleLeftUpdate,rows:30,cols:100}),a.createElement("textarea",{id:"RightText",onChange:this.handleRightUpdate,rows:30,cols:100}),a.createElement("br",null),a.createElement("label",{id:"Similarity"},"Similarity: ",this.state.similarityPercent,"% "),a.createElement("br",null),a.createElement("label",{id:"Differences"},"Differences: ",this.state.differences))},e}(a.Component);e.SimilarityDetector=u},function(t,e,n){(function(t){var r;!function(){"use strict";var o;try{o="undefined"!=typeof Intl&&void 0!==Intl.Collator?Intl.Collator("generic",{sensitivity:"base"}):null}catch(t){console.log("Collator could not be initialized and wouldn't be used")}var i=[],a=[],l={get:function(t,e,n){var r,l,u,c,f,s,p=n&&o&&n.useCollator,d=t.length,h=e.length;if(0===d)return h;if(0===h)return d;for(u=0;u<h;++u)i[u]=u,a[u]=e.charCodeAt(u);if(i[h]=h,p)for(u=0;u<d;++u){for(l=u+1,c=0;c<h;++c)r=l,s=0===o.compare(t.charAt(u),String.fromCharCode(a[c])),(l=i[c]+(s?0:1))>(f=r+1)&&(l=f),l>(f=i[c+1]+1)&&(l=f),i[c]=r;i[c]=l}else for(u=0;u<d;++u){for(l=u+1,c=0;c<h;++c)r=l,s=t.charCodeAt(u)===a[c],(l=i[c]+(s?0:1))>(f=r+1)&&(l=f),l>(f=i[c+1]+1)&&(l=f),i[c]=r;i[c]=l}return l}};null!==n(7)&&n(8)?void 0===(r=function(){return l}.call(e,n,e,t))||(t.exports=r):null!==t&&void 0!==e&&t.exports===e?t.exports=l:"undefined"!=typeof self&&"function"==typeof self.postMessage&&"function"==typeof self.importScripts?self.Levenshtein=l:"undefined"!=typeof window&&null!==window&&(window.Levenshtein=l)}()}).call(this,n(6)(t))},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e){t.exports=function(){throw new Error("define cannot be used indirect")}},function(t,e){(function(e){t.exports=e}).call(this,{})},function(t,e,n){(t.exports=n(10)(!1)).push([t.i,"textarea {\r\n    resize: none;\r\n}\r\n\r\nbody {\r\n    background-color: gray;\r\n}\r\n\r\n#Similarity,\r\n#Differences {\r\n    font-size: 2em;\r\n    color: white;\r\n}\r\n",""])},function(t,e,n){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var n=function(t,e){var n=t[1]||"",r=t[3];if(!r)return n;if(e&&"function"==typeof btoa){var o=(a=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),i=r.sources.map(function(t){return"/*# sourceURL="+r.sourceRoot+t+" */"});return[n].concat(i).concat([o]).join("\n")}var a;return[n].join("\n")}(e,t);return e[2]?"@media "+e[2]+"{"+n+"}":n}).join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];null!=i&&(r[i]=!0)}for(o=0;o<t.length;o++){var a=t[o];null!=a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),e.push(a))}},e}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,